import telebot
from telebot import types
import time
import os
from datetime import datetime, timedelta

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = 'token'
ADMIN_ID = 'id'  # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_ADMIN_TELEGRAM_ID' –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π ID –∞–¥–º–∏–Ω–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–≥–æ–≤
DATABASE_FILE = 'baza.txt'
LOGS_FILE = 'logs.txt'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
def log_action(user_id, action):
    with open(LOGS_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{user_id} - {action}\n")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def read_database():
    if not os.path.exists(DATABASE_FILE):
        return {}
    with open(DATABASE_FILE, 'r') as f:
        lines = f.readlines()
    data = {}
    for line in lines:
        parts = line.strip().split(",")
        data[parts[0]] = {
            "number": parts[1],
            "registration_time": parts[2],
            "balance": int(parts[3]),
            "last_mined": parts[4],
        }
    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def write_database(data):
    with open(DATABASE_FILE, 'w') as f:
        for user_id, info in data.items():
            f.write(f"{user_id},{info['number']},{info['registration_time']},{info['balance']},{info['last_mined']}\n")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, phone_number):
    data = read_database()
    if user_id not in data:
        registration_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data[user_id] = {
            "number": phone_number,
            "registration_time": registration_time,
            "balance": 0,
            "last_mined": "1970-01-01 00:00:00",
        }
    write_database(data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_balance(user_id, amount):
    data = read_database()
    if user_id in data:
        data[user_id]["balance"] += amount
    write_database(data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–±—ã—á–∏
def can_mine(user_id):
    data = read_database()
    if user_id in data:
        last_mined = datetime.strptime(data[user_id]["last_mined"], "%Y-%m-%d %H:%M:%S")
        if datetime.now() > last_mined + timedelta(hours=2):
            return True
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–±—ã—á–∏
def update_last_mined(user_id):
    data = read_database()
    if user_id in data:
        data[user_id]["last_mined"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    write_database(data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = str(message.chat.id)
    data = read_database()
    if user_id not in data:
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button = types.KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True)
        markup.add(button)
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ Sceplercoin ü™ô –µ—ë –ª–∏—Å—Ç–∏–Ω–≥ –±—É–¥–µ—Ç –≤ 2025 –≥–æ–¥—É. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–µ –±–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ —É –≤–∞—Å –Ω–∞—Å—Ç–æ—è—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'.", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.contact is not None:
        user_id = str(message.chat.id)
        phone_number = message.contact.phone_number
        register_user(user_id, phone_number)
        log_action(user_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button = types.KeyboardButton("–ú–∞–π–Ω–∏—Ç—å Sceplercoin ü™ô")
        markup.add(button)
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É Sceplercoin ü™ô –∏ –ø–æ–ª—É—á–∏—à—å 2000 —Ç—ã—Å—è—á–∏ Sceplercoin ü™ô.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞
@bot.message_handler(regexp="–ú–∞–π–Ω–∏—Ç—å Sceplercoin ü™ô")
def handle_mining(message):
    user_id = str(message.chat.id)
    if can_mine(user_id):
        update_balance(user_id, 2000)
        update_last_mined(user_id)
        log_action(user_id, "–ú–∞–π–Ω–∏–Ω–≥ 2000 Sceplercoin ü™ô")
        bot.send_message(message.chat.id, "–¢—ã –ø–æ–ª—É—á–∏–ª 2000 Sceplercoin ü™ô –Ω–∞ –±–∞–ª–∞–Ω—Å!")
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–∞–π–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 2 —á–∞—Å–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@bot.message_handler(commands=['profile'])
def handle_profile(message):
    user_id = str(message.chat.id)
    data = read_database()
    if user_id in data:
        user_data = data[user_id]
        response = (f"üÜîID: {user_id}\n"
                    f"üìû–ù–æ–º–µ—Ä: {user_data['number']}\n"
                    f"‚è≥–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['registration_time']}\n"
                    f"ü™ô–ë–∞–ª–∞–Ω—Å: {user_data['balance']} Sceplercoin ü™ô")
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /output
@bot.message_handler(commands=['output'])
def handle_output(message):
    bot.send_message(message.chat.id, "–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç 500–∫ Sceplercoin. –¢–∞–∫–∂–µ –∑–∞ –≤—ã–≤–æ–¥ –¥–æ –ª–∏—Å—Ç–∏–Ω–≥–∞ –±—É–¥–µ—Ç –≤–∑–Ω–µ–º–∞—Ç—Å—è –∫–æ–º–∏—Å–∏—è –æ—Ç 2 USD.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@bot.message_handler(commands=['help'])
def handle_help(message):
    if str(message.chat.id) == ADMIN_ID:
        response = ("/replenishment (id) (—Å—É–º–º–∞) - –ü–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id.\n"
                    "/clear (id) (—Å—É–º–º–∞) - –í—ã—á—Ç–µ—Ç —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                    "/logs (id) - –í—ã–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ª–æ–≥–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /replenishment –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['replenishment'])
def handle_replenishment(message):
    if str(message.chat.id) == ADMIN_ID:
        try:
            command, user_id, amount = message.text.split()
            update_balance(user_id, int(amount))
            log_action(user_id, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} Sceplercoin ü™ô")
            bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} Sceplercoin ü™ô.")
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /replenishment (id) (—Å—É–º–º–∞)")

# –ö–æ–º–∞–Ω–¥–∞ /clear –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['clear'])
def handle_clear(message):
    if str(message.chat.id) == ADMIN_ID:
        try:
            command, user_id, amount = message.text.split()
            update_balance(user_id, -int(amount))
            log_action(user_id, f"–í—ã—á–∏—Ç–∞–Ω–∏–µ {amount} Sceplercoin ü™ô")
            bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount} Sceplercoin ü™ô.")
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /clear (id) (—Å—É–º–º–∞)")

# –ö–æ–º–∞–Ω–¥–∞ /logs –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['logs'])
def handle_logs(message):
    if str(message.chat.id) == ADMIN_ID:
        try:
            command, user_id = message.text.split()
            with open(LOGS_FILE, 'r') as file:
                logs = [line for line in file if line.startswith(user_id)]
            logs_filename = f"logs_{user_id}.txt"
            with open(logs_filename, 'w') as log_file:
                log_file.writelines(logs)
            bot.send_document(message.chat.id, open(logs_filename, 'r'))
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /logs (id)")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_unknown_message(message):
    bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)
